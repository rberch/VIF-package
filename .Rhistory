library(VIFpkg)
detach("package:VIFpkg", unload = TRUE)
remove.packages("VIFpkg")
install.packages("../VIFpkg_0.0.0.9000.tar.gz", repos = NULL)
library(VIFpkg)
xk = VIFpkg::VIFsM(Data = data.frame(MASS::Boston[,-1]), multi = TRUE)
plot(x=xk, multi = TRUE)
library(VIFpkg)
?VIFsM
VIFsM <- function(Data, multi=FALSE,maxim = 4){   # argument is a matrix of the predictor variables
VIF <- NULL
if(!multi){
n <- ncol(Data)
VIF.out <- sapply(1:n, \(j) {
work.frame <- data.table::data.table(y = Data[,j], x=Data[,-j])
R2.temp<-summary(stats::lm(y ~ ., data=work.frame))$r.squared # regress predictor j on the
# other predictors and extract R^2
return(1/(1-R2.temp))
})
outss <- data.table::data.table(Predictor = colnames(Data), VIF=VIF.out) |>
dplyr::arrange(dplyr::desc(VIF))
structure(list(outss = outss), class = "VIFs")
}else{
Predictor <- NULL
listy <- list()
max.vif <- 10^8
while(max.vif > maxim){
n <- ncol(Data)
VIF.out <- sapply(1:n, \(j) {
work.frame <- data.table::data.table(y = Data[,j], x=Data[,-j])
R2.temp<-summary(stats::lm(y ~ ., data=work.frame))$r.squared # regress predictor j on the
# other predictors and extract R^2
return(1/(1-R2.temp))
})
outss <- data.table::data.table(Predictor = colnames(Data), VIF=VIF.out) |>
dplyr::arrange(dplyr::desc(VIF))
if(max(VIF.out) > maxim){
#outsDFl <- outsDF$outss[min(which(outsDF$outss$VIF > maxim)),Predictor]
outsDFl <- names(Data)[which.max(VIF.out)]
KO_var_number <- which.max(VIF.out)
Data <- Data[,-KO_var_number]
max.vif <- max(VIF.out)
listy <- c(listy,list(outss, kicked_OUT = outsDFl))
}else{max.vif = max(VIF.out)
listy <- c(listy,list(outss, kicked_OUT = "All VIF values are less than maxim"))}
}
structure(listy, class = "VIFsM")
}
}
#' @rdname VIFsM
#' @return a plot of the VIF values
#' @param x object of class \code{VIFsM}
#' @param maxx maximum number of VIF indicating multicollinearity. Default value is 4
#' @param multi logical stating whether multiple VIFs until no multicollinearity present based on maxim. Default is FALSE, which just checks the VIFs of the current data
#' @param ... Further arguments passed to ggplot2
#'
#' @export
plot.VIFsM <- function(x,maxx = 4,multi = FALSE,...){
VIF <- NULL
Predictor <- NULL
df <- x$outss
if(!multi){
df <- x$outss
p1 <- ggplot2::ggplot(df,ggplot2::aes(x = stats::reorder(Predictor,+VIF),y = VIF)) +
ggplot2::geom_col(width = 0.5, fill = "steelblue") +
ggplot2::xlab("Variable") +
ggplot2::geom_hline(yintercept = maxx, linetype="dashed", color = "red") +
ggplot2::scale_y_continuous(limits = c(0,max(x$outss$VIF) + 1), breaks = seq(0,max(x$outss$VIF) + 1, by = 1)) +
ggplot2::ylab("VIF") +
ggplot2::coord_flip() +
ggplot2::theme_bw() +
ggplot2::ggtitle("VIFs of Predictor variables")
p1
}else{
out_num <- length(x)
plotlist <- list()
df1 <- x[[1]] # extract to use for maintaining the same scale on y-axis
ylm <- max(df1$VIF) # y-axis max
for (i in 1:out_num) {
if (i %% 2 ==1) {
df <- x[[i]]
p1 <- ggplot2::ggplot(df,ggplot2::aes(x = stats::reorder(Predictor,+VIF),y = VIF)) +
ggplot2::geom_col(width = 0.5, fill = "steelblue") +
ggplot2::xlab("Variable") +
ggplot2::geom_hline(yintercept = maxx, linetype="dashed", color = "red") +
ggplot2::scale_y_continuous(limits = c(0,ylm + 1), breaks = seq(0,ylm + 1, by = 1)) +
ggplot2::ylab("VIF") +
ggplot2::coord_flip() +
ggplot2::theme_bw() +
ggplot2::ggtitle("VIFs of Predictor variables")
plotlist[[i]] <- p1
}
}
gridExtra::grid.arrange(grobs=plotlist,nrow=out_num/2)
}
}
#' @rdname VIFsM
#' @return a summary of the VIF values
#' @param x object of class \code{VIFsM}
#' @param multi logical stating whether multiple VIFs until no multicollinearity present based on maxim. Default is FALSE, which just checks the VIFs of the current data
#' @param ... Further arguments passed to ggplot2
#'
#' @export
summary.VIFsM <- function(object,multi = FALSE,...){
if(!multi){
df <- object$outss
print(df)
}else{
out_num <- length(object)
summList <- list()
koList <- list()
j=1
for (i in 1:out_num) {
if (i %% 2 ==1) {
df <- object[[i]]
summList[[j]] <- df
KO <- object[[i+1]]
koList[[j]] <- KO
j <- j+1
}
}
print(list("VIF summaries" = summList, "Variable kicked OUT due to large VIF value" = koList))
}
}
df <- data.frame(MASS::Boston[,-1])
xs <- VIFsM(df, multi=FALSE,maxim = 4)
plot(x = xs,maxx = 4)
summary(object=xs)
#' @rdname VIFsM
#' @return a summary of the VIF values
#' @param object of class \code{VIFsM}
#' @param multi logical stating whether multiple VIFs until no multicollinearity present based on maxim. Default is FALSE, which just checks the VIFs of the current data
#' @param ... Further arguments passed to ggplot2
#'
#' @export
summary.VIFsM <- function(object,multi = FALSE,...){
if(!multi){
df <- object$outss
print(df)
}else{
out_num <- length(object)
summList <- list()
koList <- list()
j=1
for (i in 1:out_num) {
if (i %% 2 ==1) {
df <- object[[i]]
summList[[j]] <- df
KO <- object[[i+1]]
koList[[j]] <- KO
j <- j+1
}
}
print(list("VIF summaries" = summList, "Variable kicked OUT due to large VIF value" = koList))
}
}
#' @rdname VIFsM
#' @return a plot of the VIF values
#' @param x object of class \code{VIFsM}
#' @param maxx maximum number of VIF indicating multicollinearity. Default value is 4
#' @param multi logical stating whether multiple VIFs until no multicollinearity present based on maxim. Default is FALSE, which just checks the VIFs of the current data
#' @param ... Further arguments passed to ggplot2
#'
#' @export
plot.VIFsM <- function(x,maxx = 4,multi = FALSE,...){
VIF <- NULL
Predictor <- NULL
df <- x$outss
if(!multi){
df <- x$outss
p1 <- ggplot2::ggplot(df,ggplot2::aes(x = stats::reorder(Predictor,+VIF),y = VIF)) +
ggplot2::geom_col(width = 0.5, fill = "steelblue") +
ggplot2::xlab("Variable") +
ggplot2::geom_hline(yintercept = maxx, linetype="dashed", color = "red") +
ggplot2::scale_y_continuous(limits = c(0,max(x$outss$VIF) + 1), breaks = seq(0,max(x$outss$VIF) + 1, by = 1)) +
ggplot2::ylab("VIF") +
ggplot2::coord_flip() +
ggplot2::theme_bw() +
ggplot2::ggtitle("VIFs of Predictor variables")
p1
}else{
out_num <- length(x)
plotlist <- list()
df1 <- x[[1]] # extract to use for maintaining the same scale on y-axis
ylm <- max(df1$VIF) # y-axis max
for (i in 1:out_num) {
if (i %% 2 ==1) {
df <- x[[i]]
p1 <- ggplot2::ggplot(df,ggplot2::aes(x = stats::reorder(Predictor,+VIF),y = VIF)) +
ggplot2::geom_col(width = 0.5, fill = "steelblue") +
ggplot2::xlab("Variable") +
ggplot2::geom_hline(yintercept = maxx, linetype="dashed", color = "red") +
ggplot2::scale_y_continuous(limits = c(0,ylm + 1), breaks = seq(0,ylm + 1, by = 1)) +
ggplot2::ylab("VIF") +
ggplot2::coord_flip() +
ggplot2::theme_bw() +
ggplot2::ggtitle("VIFs of Predictor variables")
plotlist[[i]] <- p1
}
}
gridExtra::grid.arrange(grobs=plotlist,nrow=out_num/2)
}
}
df <- data.frame(MASS::Boston[,-1])
xs <- VIFsM(df, multi=FALSE,maxim = 4)
plot(x = xs,maxx = 4)
xs$outss
xs$outss %>% data.frame()
library(dplyr)
xs$outss %>% data.frame()
#' @rdname VIFsM
#' @return a plot of the VIF values
#' @param x object of class \code{VIFsM}
#' @param maxx maximum number of VIF indicating multicollinearity. Default value is 4
#' @param multi logical stating whether multiple VIFs until no multicollinearity present based on maxim. Default is FALSE, which just checks the VIFs of the current data
#' @param ... Further arguments passed to ggplot2
#'
#' @export
plot.VIFsM <- function(x,maxx = 4,multi = FALSE,...){
VIF <- NULL
Predictor <- NULL
df <- x$outss |> data.frame()
if(!multi){
df <- x$outss |> data.frame()
p1 <- ggplot2::ggplot(df,ggplot2::aes(x = stats::reorder(Predictor,+VIF),y = VIF)) +
ggplot2::geom_col(width = 0.5, fill = "steelblue") +
ggplot2::xlab("Variable") +
ggplot2::geom_hline(yintercept = maxx, linetype="dashed", color = "red") +
ggplot2::scale_y_continuous(limits = c(0,max(x$outss$VIF) + 1), breaks = seq(0,max(x$outss$VIF) + 1, by = 1)) +
ggplot2::ylab("VIF") +
ggplot2::coord_flip() +
ggplot2::theme_bw() +
ggplot2::ggtitle("VIFs of Predictor variables")
p1
}else{
out_num <- length(x)
plotlist <- list()
df1 <- x[[1]] # extract to use for maintaining the same scale on y-axis
ylm <- max(df1$VIF) # y-axis max
for (i in 1:out_num) {
if (i %% 2 ==1) {
df <- x[[i]]
p1 <- ggplot2::ggplot(df,ggplot2::aes(x = stats::reorder(Predictor,+VIF),y = VIF)) +
ggplot2::geom_col(width = 0.5, fill = "steelblue") +
ggplot2::xlab("Variable") +
ggplot2::geom_hline(yintercept = maxx, linetype="dashed", color = "red") +
ggplot2::scale_y_continuous(limits = c(0,ylm + 1), breaks = seq(0,ylm + 1, by = 1)) +
ggplot2::ylab("VIF") +
ggplot2::coord_flip() +
ggplot2::theme_bw() +
ggplot2::ggtitle("VIFs of Predictor variables")
plotlist[[i]] <- p1
}
}
gridExtra::grid.arrange(grobs=plotlist,nrow=out_num/2)
}
}
plot(x = xs,maxx = 4)
detach("package:VIFpkg", unload = TRUE)
plot.VIFsM(x = xs,maxx = 4)
#' @rdname VIFsM
#' @return a plot of the VIF values
#' @param x object of class \code{VIFsM}
#' @param maxx maximum number of VIF indicating multicollinearity. Default value is 4
#' @param multi logical stating whether multiple VIFs until no multicollinearity present based on maxim. Default is FALSE, which just checks the VIFs of the current data
#' @param ... Further arguments passed to ggplot2
#'
#' @export
plot <- function(x, maxx = 4,multi = FALSE,...){
VIF <- NULL
Predictor <- NULL
df <- x$outss #|> data.frame()
if(!multi){
df <- x$outss #|> data.frame()
p1 <- ggplot2::ggplot(df,ggplot2::aes(x = stats::reorder(Predictor,+VIF),y = VIF)) +
ggplot2::geom_col(width = 0.5, fill = "steelblue") +
ggplot2::xlab("Variable") +
ggplot2::geom_hline(yintercept = maxx, linetype="dashed", color = "red") +
ggplot2::scale_y_continuous(limits = c(0,max(x$outss$VIF) + 1), breaks = seq(0,max(x$outss$VIF) + 1, by = 1)) +
ggplot2::ylab("VIF") +
ggplot2::coord_flip() +
ggplot2::theme_bw() +
ggplot2::ggtitle("VIFs of Predictor variables")
p1
}else{
out_num <- length(x)
plotlist <- list()
df1 <- x[[1]] # extract to use for maintaining the same scale on y-axis
ylm <- max(df1$VIF) # y-axis max
for (i in 1:out_num) {
if (i %% 2 ==1) {
df <- x[[i]]
p1 <- ggplot2::ggplot(df,ggplot2::aes(x = stats::reorder(Predictor,+VIF),y = VIF)) +
ggplot2::geom_col(width = 0.5, fill = "steelblue") +
ggplot2::xlab("Variable") +
ggplot2::geom_hline(yintercept = maxx, linetype="dashed", color = "red") +
ggplot2::scale_y_continuous(limits = c(0,ylm + 1), breaks = seq(0,ylm + 1, by = 1)) +
ggplot2::ylab("VIF") +
ggplot2::coord_flip() +
ggplot2::theme_bw() +
ggplot2::ggtitle("VIFs of Predictor variables")
plotlist[[i]] <- p1
}
}
gridExtra::grid.arrange(grobs=plotlist,nrow=out_num/2)
}
}
plot(x = xs,maxx = 4)
#' @rdname VIFsM
#' @return a plot of the VIF values
#' @param x object of class \code{VIFsM}
#' @param maxx maximum number of VIF indicating multicollinearity. Default value is 4
#' @param multi logical stating whether multiple VIFs until no multicollinearity present based on maxim. Default is FALSE, which just checks the VIFs of the current data
#' @param ... Further arguments passed to ggplot2
#'
#' @export
plot <- function(x, maxx = 4,multi = FALSE,...){
VIF <- NULL
Predictor <- NULL
df <- x$outss #|> data.frame()
if(!multi){
df <- x$outss #|> data.frame()
p1 <- ggplot2::ggplot(df,ggplot2::aes(x = stats::reorder(Predictor,+VIF),y = VIF)) +
ggplot2::geom_col(width = 0.5, fill = "steelblue") +
ggplot2::xlab("Variable") +
ggplot2::geom_hline(yintercept = maxx, linetype="dashed", color = "red") +
ggplot2::scale_y_continuous(limits = c(0,max(df$VIF) + 1), breaks = seq(0,max(df$VIF) + 1, by = 1)) +
ggplot2::ylab("VIF") +
ggplot2::coord_flip() +
ggplot2::theme_bw() +
ggplot2::ggtitle("VIFs of Predictor variables")
p1
}else{
out_num <- length(x)
plotlist <- list()
df1 <- x[[1]] # extract to use for maintaining the same scale on y-axis
ylm <- max(df1$VIF) # y-axis max
for (i in 1:out_num) {
if (i %% 2 ==1) {
df <- x[[i]]
p1 <- ggplot2::ggplot(df,ggplot2::aes(x = stats::reorder(Predictor,+VIF),y = VIF)) +
ggplot2::geom_col(width = 0.5, fill = "steelblue") +
ggplot2::xlab("Variable") +
ggplot2::geom_hline(yintercept = maxx, linetype="dashed", color = "red") +
ggplot2::scale_y_continuous(limits = c(0,ylm + 1), breaks = seq(0,ylm + 1, by = 1)) +
ggplot2::ylab("VIF") +
ggplot2::coord_flip() +
ggplot2::theme_bw() +
ggplot2::ggtitle("VIFs of Predictor variables")
plotlist[[i]] <- p1
}
}
gridExtra::grid.arrange(grobs=plotlist,nrow=out_num/2)
}
}
df <- data.frame(MASS::Boston[,-1])
xs <- VIFsM(df, multi=FALSE,maxim = 4)
xs
plot(x = xs,maxx = 4)
summary(object=xs)
#' @rdname VIFsM
#' @return a plot of the VIF values
#' @param x object of class \code{VIFsM}
#' @param maxx maximum number of VIF indicating multicollinearity. Default value is 4
#' @param multi logical stating whether multiple VIFs until no multicollinearity present based on maxim. Default is FALSE, which just checks the VIFs of the current data
#' @param ... Further arguments passed to ggplot2
#'
#' @export
plot <- function(x, maxx = 4,multi = FALSE,...){
VIF <- NULL
Predictor <- NULL
df <- x$outss #|> data.frame()
if(!multi){
df <- x$outss #|> data.frame()
ylimm <- c(max(df$VIF))
p1 <- ggplot2::ggplot(df,ggplot2::aes(x = stats::reorder(Predictor,+VIF),y = VIF)) +
ggplot2::geom_col(width = 0.5, fill = "steelblue") +
ggplot2::xlab("Variable") +
ggplot2::geom_hline(yintercept = maxx, linetype="dashed", color = "red") +
ggplot2::scale_y_continuous(limits = c(0,ylimm + 1), breaks = seq(0,ylimm + 1, by = 1)) +
ggplot2::ylab("VIF") +
ggplot2::coord_flip() +
ggplot2::theme_bw() +
ggplot2::ggtitle("VIFs of Predictor variables")
p1
}else{
out_num <- length(x)
plotlist <- list()
df1 <- x[[1]] # extract to use for maintaining the same scale on y-axis
ylm <- max(df1$VIF) # y-axis max
for (i in 1:out_num) {
if (i %% 2 ==1) {
df <- x[[i]]
p1 <- ggplot2::ggplot(df,ggplot2::aes(x = stats::reorder(Predictor,+VIF),y = VIF)) +
ggplot2::geom_col(width = 0.5, fill = "steelblue") +
ggplot2::xlab("Variable") +
ggplot2::geom_hline(yintercept = maxx, linetype="dashed", color = "red") +
ggplot2::scale_y_continuous(limits = c(0,ylm + 1), breaks = seq(0,ylm + 1, by = 1)) +
ggplot2::ylab("VIF") +
ggplot2::coord_flip() +
ggplot2::theme_bw() +
ggplot2::ggtitle("VIFs of Predictor variables")
plotlist[[i]] <- p1
}
}
gridExtra::grid.arrange(grobs=plotlist,nrow=out_num/2)
}
}
plot(x = xs,maxx = 4)
xs <- VIFsM(df, multi=FALSE,maxim = 4)
xs
plot(x = xs,maxx = 4)
remove.packages("VIFpkg")
install.packages("../VIFpkg_0.0.0.9000.tar.gz", repos = NULL)
library(VIFpkg)
detach("package:VIFpkg", unload = TRUE)
library(VIFpkg)
df <- data.frame(MASS::Boston[,-1])
xs <- VIFsM(df, multi=FALSE,maxim = 4)
plot(x = xs,maxx = 4)
summary(object=xs)
summary.VIFsM(object=xs)
summary(xs)
VIFpkg::summary(xs)
#' @rdname VIFsM
#' @return a plot of the VIF values
#' @param x object of class \code{VIFsM}
#' @param maxx numeric value. The maximum acceptable VIF value. Predictor variables are sequentially kicked out of the model if they have VIF greater than the maxim when multi = TRUE. Default is value 4.
#' @param multi logical stating whether to drop the variable with VIF greater than maxim, and proceed to recompute VIF until no multicollinearity exist based on maxim value defined. Default is FALSE, which just computes the VIF of the current data
#' @param ... Further arguments passed to ggplot2
#'
#' @export
Plot <- function(x, maxx = 4,multi = FALSE,...){
VIF <- NULL
Predictor <- NULL
df <- x$outss #|> data.frame()
if(!multi){
df <- x$outss #|> data.frame()
ylimm <- c(max(x$outss$VIF))
p1 <- ggplot2::ggplot(df,ggplot2::aes(x = stats::reorder(Predictor,+VIF),y = VIF)) +
ggplot2::geom_col(width = 0.5, fill = "steelblue") +
ggplot2::xlab("Variable") +
ggplot2::geom_hline(yintercept = maxx, linetype="dashed", color = "red") +
ggplot2::scale_y_continuous(limits = c(0,ylimm + 1), breaks = seq(0,ylimm + 1, by = 1)) +
ggplot2::ylab("VIF") +
ggplot2::coord_flip() +
ggplot2::theme_bw() +
ggplot2::ggtitle("VIFs of Predictor variables")
p1
}else{
out_num <- length(x)
plotlist <- list()
df1 <- x[[1]] # extract to use for maintaining the same scale on y-axis
ylm <- max(df1$VIF) # y-axis max
for (i in 1:out_num) {
if (i %% 2 ==1) {
df <- x[[i]]
p1 <- ggplot2::ggplot(df,ggplot2::aes(x = stats::reorder(Predictor,+VIF),y = VIF)) +
ggplot2::geom_col(width = 0.5, fill = "steelblue") +
ggplot2::xlab("Variable") +
ggplot2::geom_hline(yintercept = maxx, linetype="dashed", color = "red") +
ggplot2::scale_y_continuous(limits = c(0,ylm + 1), breaks = seq(0,ylm + 1, by = 1)) +
ggplot2::ylab("VIF") +
ggplot2::coord_flip() +
ggplot2::theme_bw() +
ggplot2::ggtitle("VIFs of Predictor variables")
plotlist[[i]] <- p1
}
}
gridExtra::grid.arrange(grobs=plotlist,nrow=out_num/2)
}
}
df <- data.frame(MASS::Boston[,-1])
xs <- VIFsM(df, multi=FALSE,maxim = 4)
Plot(x = xs,maxx = 4)
#' @rdname VIFsM
#' @return a summary of the VIF values
#' @param object of class \code{VIFsM}
#' @param multi logical stating whether to drop the variable with VIF greater than maxim, and proceed to recompute VIF until no multicollinearity exist based on maxim value defined. Default is FALSE, which just computes the VIF of the current data
#'
#' @export
summarY <- function(object,multi = FALSE,...){
if(!multi){
df <- object$outss
print(df)
}else{
out_num <- length(object)
summList <- list()
koList <- list()
j=1
for (i in 1:out_num) {
if (i %% 2 ==1) {
df <- object[[i]]
summList[[j]] <- df
KO <- object[[i+1]]
koList[[j]] <- KO
j <- j+1
}
}
print(list("VIF summaries" = summList, "Variable kicked OUT due to large VIF value" = koList))
}
}
summarY(object=xs)
remove.packages("VIFpkg")
install.packages("../VIFpkg_0.1.0.tar.gz")
library(VIFpkg)
?VIFsM
detach("package:VIFpkg", unload = TRUE)
remove.packages("VIFpkg")
install.packages("../VIFpkg_0.1.0.tar.gz", repos = NULL)
library(VIFpkg)
?VIFsM
